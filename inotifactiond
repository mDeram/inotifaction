#!/bin/sh

DAEMON_NAME="inotifactiond"

DAEMONSTATE_active=1
DAEMONSTATE_inactive=0

SAVE_DIR=$HOME/.inotifaction
SAVE_LOG=$SAVE_DIR/log
SAVE_PID=$SAVE_DIR/pid
SAVE_ERR=$SAVE_DIR/err # or /dev/null

CONFIG=$HOME/.config/inotifaction/config
SCRIPT_DIR=$HOME/.inotifaction/scripts

daemonize() {
    export PATH=$PWD:$PATH
    cd /
    #umask 022 do we need a umask here ? I don't think so
    nohup setsid $0 DAEMON $* 2>$SAVE_ERR >$SAVE_LOG & echo "$!" > $SAVE_PID
}

start() {
    getDaemonStatus
    if [ "$?" = "$DAEMONSTATE_active" ]; then
        echo "Currently active"
        return 1
    fi

    echo "Checking if the save directory exists"
    mkdir -p -- "$SAVE_DIR"
    if [ ! -d "$SAVE_DIR" ]; then
        echo "Missing directory ${SAVE_DIR} & cannot be created"
        echo "Try 'mkdir ${SAVE_DIR}' or run the install file" 
        exit 1
    fi
    echo "Ok"

    echo "Starting inotifaction daemon"
    daemonize
    echo "Daemon started"
}

stop() {
    # This is safe because either the pid is taken by the inotifaction daemon
    # or by nothing since the only unsafe case would be:
    #
    # The pid correspond to the inotifaction daemon, then its killed, then
    # another program take that pid which is impossible since pids are
    # incremental so the system would need a restart thus killing that script.
    # So this unsafe case isn't possible.
    #
    # We are safe :)

    # Getting the pid before make sure the pid is not changed after calling
    # getDaemonStatus, thus preventing this program to kill other process
    daemon_pid=$(cat $SAVE_PID)
    getDaemonStatus $daemon_pid
    if [ "$?" = "$DAEMONSTATE_inactive" ]; then
        echo "Currently inactive"
        return 1
    fi

    # Kills the daemon with its childs processes
    kill -9 -"$daemon_pid"
    echo "Daemon killed"
}

# getDaemonStatus [pid]
getDaemonStatus() {
    # Get the pid from params or from the pid file
    daemon_pid="${1:-$(cat $SAVE_PID)}"
    # Check pid not empty
    if [ "$daemon_pid" = "" ]; then
        return $DAEMONSTATE_inactive
    fi

    daemon_pid_name=$(ps -p $daemon_pid -o comm=) 
    #if [ "$daemon_pid_name" = "$0" ]; then
    if [ "$daemon_pid_name" = "$DAEMON_NAME" ]; then
        return $DAEMONSTATE_active
    else
        return $DAEMONSTATE_inactive
    fi
}

status() {
    getDaemonStatus
    case $? in
        $DAEMONSTATE_active)    echo "Active"   ;;
        $DAEMONSTATE_inactive)  echo "Inactive" ;;
    esac
}

parse() {
    # Is a comment?
    if [ "$(echo $line | cut -c1)" = '#' ]; then
        return 0
    fi

    script=$(echo $line | cut -d';' -f1)
    args=$(echo $line | cut -d';' -f2)
    dir=$(echo $line | cut -d';' -f3)

    # Is format invalid?
    if [ -z "$script" -o -z "$dir" ]; then
        return 0
    fi

    # Echo to the log file
    echo "$script $args $dir"
    inotifywait ${args} ${dir} | xargs -n3 ${SCRIPT_DIR}/${script} &
}

if [ "$1" = "DAEMON" ]; then
    # Cannot die on ctrl+c
    trap '' INT
    #trap 'cleanupFunction; exit 0' TERM
    # Shift args to the left
    shift 
    
    ### Daemonized section ###

    while read -r line; do
        parse $line
    done < $CONFIG

    ### End of daemonized section ###
    wait

    exit 0
else
    case "${1}" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            stop
            start
            ;;
        status)
            status
            ;;
        *)
            echo "Usage: ${0} {start|stop|restart|status}"
            exit 1
    esac
fi
